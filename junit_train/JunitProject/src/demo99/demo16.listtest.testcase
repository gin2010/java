package demo16;

import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;

public class ListTest02 {
    private List list;
    @Before
    public void setUp() {
        list = new List();
    }
   // бн
   @Test
   public void add() {
      Object first = new Object();
      Object second = new Object();
      list.add(first);
      list.add(second);
      assertSame(first, list.get(0));
      assertSame(second, list.get(1));
   }
   
    // бн
    @Test
    public void addPastCapacity() {
        int moreThanCapacity = List.INITIAL_CAPACITY+1;
        Object elements[] = new Object[moreThanCapacity];
        for (int index = 0; index < moreThanCapacity; index++) {
            elements[index] = new Object();
            list.add(elements[index]);
        }
        for (int index = 0; index < moreThanCapacity; index++)
            assertSame(elements[index], list.get(index));
    }
    // бн
    @Test
    public void testInvalidGet() {
        assertOutOfRangeThrownOnGet(-1);
        assertOutOfRangeThrownOnGet(0);
        list.add(new Object());
        assertOutOfRangeThrownOnGet(1);
    }
     // бн
    private void assertOutOfRangeThrownOnGet(int index) {
        try {
            list.get(index);
            fail("get() should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
        }
    }
    // бн
    @Test
    public void isEmpty() {
        assertTrue(list.isEmpty());
        list.add(new Object());
        assertFalse(list.isEmpty());
    }

}



_____________________________________________________________________________________________

package demo16;

import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;

public class ListTest03 {
    private List list;
    @Before
    public void setUp() {
        list = new List();
    }
     // бн
    private void assertOutOfRangeThrownOnGet(int index) {
        try {
            list.get(index);
            fail("get() should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
        }
    }
     // бн
    @Test
    public void emptyList() {
        assertOutOfRangeThrownOnGet(0);
        assertTrue(list.isEmpty());
    }
    // бн
    @Test
    public void oneElement() {
        Object element = new Object();
        list.add(element);
        assertSame(element, list.get(0));
        assertFalse(list.isEmpty());
    }
    // бн
    @Test
    public void grow() {
        for (int index = 0; index < List.INITIAL_CAPACITY; index++)
            list.add(new Object());
        Object elementAfterGrow = new Object();
        list.add(elementAfterGrow);
        assertSame(elementAfterGrow, list.get(List.INITIAL_CAPACITY));
    }
     // бн
    @Test
    public void ordering() {
        int elementCount = List.INITIAL_CAPACITY+1;
        Object elements[] = new Object[elementCount];
        for (int index = 0; index < elementCount; index++) {
            elements[index] = new Object();
            list.add(elements[index]);
        }
        for (int index = 0; index < elementCount; index++)
            assertSame(elements[index], list.get(index));
    }
     // бн
    @Test
    public void negativeGet() {
        assertOutOfRangeThrownOnGet(-1);
    }

}
